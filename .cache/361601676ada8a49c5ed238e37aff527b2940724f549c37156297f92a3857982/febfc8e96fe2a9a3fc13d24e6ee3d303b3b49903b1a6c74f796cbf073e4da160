/* lib/blob.ts */
const mod6 = (async () => {
    const { random } = await mod11;
    const randomPalette = () => {
        const hue = random(0, 360);
        const saturation = random(75, 100);
        const lightness = random(75, 95);
        const primary = `hsl(${hue}, ${saturation}%, ${lightness}%)`;
        const dark = `hsl(${hue}, ${saturation}%, 2%)`;
        const light = `hsl(${hue}, ${saturation}%, 98%)`;
        return {
            primary, dark, light
        };
    };
    const randomBody = (x, y, size) => {
        const numPoints = random(3, 12);
        const angleStep = (Math.PI * 2) / numPoints;
        return Array(numPoints).fill(0).map((_, i) => {
            const pull = random(0.75, 1, true);
            const px = x + Math.cos(i * angleStep) * (size * pull);
            const py = y + Math.sin(i * angleStep) * (size * pull);
            return {
                x: px, y: py
            };
        });
    };
    const randomEyes = (x, y, width) => {
        const isCyclops = random(0, 1, true) > 0.75;
        const size = random(width / 2, width);
        if (isCyclops) {
            return [
                {
                    x, y, size
                }
            ];
        }
        return [
            {
                y, size, x: x - width
            }, {
                y, size, x: x + width
            }
        ];
    };
    const randomBlob = (width, height) => {
        const x = width / 2;
        const y = height / 2;
        const size = random(50, 80);
        const colors = randomPalette();
        const body = randomBody(x, y, size);
        const maxWidth = size / 2;
        const eyes = randomEyes(x, y, maxWidth);
        return {
            id: btoa(`${Date.now()}${random(0, 1000)}`), x, y, width, height, body, eyes, colors
        };
    };
    return { randomPalette, randomBody, randomEyes, randomBlob };
})();
