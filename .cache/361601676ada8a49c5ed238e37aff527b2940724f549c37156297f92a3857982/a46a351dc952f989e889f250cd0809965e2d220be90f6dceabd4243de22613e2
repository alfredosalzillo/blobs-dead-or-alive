System.register("lib/App.tsx", ["https://esm.sh/react@17.0.1", "lib/components/SvgBlob.tsx", "lib/blob.ts", "lib/components/WantedPoster.tsx", "lib/game.ts"], function (exports_1, context_1) {
    "use strict";
    var react_1, SvgBlob_tsx_1, blob_ts_1, WantedPoster_tsx_1, game_ts_1, initialGame, App;
    var __moduleName = context_1 && context_1.id;
    return {
        setters: [
            function (react_1_1) {
                react_1 = react_1_1;
            },
            function (SvgBlob_tsx_1_1) {
                SvgBlob_tsx_1 = SvgBlob_tsx_1_1;
            },
            function (blob_ts_1_1) {
                blob_ts_1 = blob_ts_1_1;
            },
            function (WantedPoster_tsx_1_1) {
                WantedPoster_tsx_1 = WantedPoster_tsx_1_1;
            },
            function (game_ts_1_1) {
                game_ts_1 = game_ts_1_1;
            }
        ],
        execute: function () {
            initialGame = game_ts_1.initialRound(0);
            App = () => {
                const [game, setGame] = react_1.useState(initialGame);
                const { blobs, wanted, points, time, elapsed } = game;
                const status = game_ts_1.getStatus(game);
                react_1.useEffect(() => {
                    let request = null;
                    let last = 0;
                    const updateElapsed = () => {
                        request = window.requestAnimationFrame((time) => {
                            const elapsed = time - last;
                            setGame((prev) => {
                                if (prev.round === 0)
                                    return prev;
                                return ({
                                    ...prev,
                                    elapsed: Math.min(prev.elapsed + elapsed, prev.time),
                                });
                            });
                            last = time;
                            updateElapsed();
                        });
                    };
                    updateElapsed();
                    return () => window.cancelAnimationFrame(request);
                }, []);
                const onBlobClick = (blob) => {
                    if (blob.id === wanted.id) {
                        setGame(game_ts_1.nextRound);
                    }
                };
                return (react_1.default.createElement(react_1.default.Fragment, null,
                    react_1.default.createElement("header", null,
                        react_1.default.createElement("h1", { className: "title" },
                            "BLOBS ",
                            react_1.default.createElement("span", { className: "title-doa" }, "DEAD OR ALIVE"))),
                    react_1.default.createElement("div", { className: "content" },
                        react_1.default.createElement("div", { className: "content-header" },
                            react_1.default.createElement("div", { className: "controls" },
                                react_1.default.createElement("div", null,
                                    react_1.default.createElement("progress", { value: (time - elapsed) / time, max: 1, "data-animated": elapsed > 0 },
                                        elapsed,
                                        "ms")),
                                react_1.default.createElement("div", { className: "score" },
                                    "PT ",
                                    points)),
                            react_1.default.createElement(WantedPoster_tsx_1.default, null, wanted && react_1.default.createElement(SvgBlob_tsx_1.default, Object.assign({}, wanted)))),
                        react_1.default.createElement("div", { className: "board" }, blobs.map((blob) => (react_1.default.createElement("div", { className: "box", onClick: () => onBlobClick(blob) },
                            react_1.default.createElement(SvgBlob_tsx_1.default, Object.assign({ key: blob.id }, blob, { animated: true })))))),
                        status === 'start' && (react_1.default.createElement("div", { className: "dialog-backdrop" },
                            react_1.default.createElement("dialog", { className: "dialog", open: true },
                                react_1.default.createElement("h1", null, "Instructions"),
                                react_1.default.createElement("p", null, "Find the WANTED BLOB before the time end."),
                                react_1.default.createElement("button", { className: "action-button", onClick: () => setGame(game_ts_1.initialRound(1)) }, "START")))),
                        status === 'loose' && (react_1.default.createElement("div", { className: "dialog-backdrop" },
                            react_1.default.createElement("dialog", { className: "dialog", open: true },
                                react_1.default.createElement("h1", null, "You LOOSE"),
                                react_1.default.createElement("p", null,
                                    react_1.default.createElement("h3", null, "SCORE"),
                                    points,
                                    " PT"),
                                react_1.default.createElement("button", { className: "action-button", onClick: () => setGame(game_ts_1.initialRound(1)) }, "RETRY")))))));
            };
            exports_1("default", App);
        }
    };
});
