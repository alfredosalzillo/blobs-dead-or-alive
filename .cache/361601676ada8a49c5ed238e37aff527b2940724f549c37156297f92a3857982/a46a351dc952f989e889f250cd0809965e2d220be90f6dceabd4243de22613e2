/* lib/App.tsx */
const mod12 = (async () => {
    const { useEffect, useState } = await mod2;
    const SvgBlob = (await mod9).default;
    const { Blob, randomBlob } = await mod7;
    const WantedPoster = (await mod10).default;
    const { getStatus, initialRound, nextRound } = await mod11;
    const StartDialog = ({ onClickStart }) => (React.createElement("div", { className: "dialog-backdrop" },
        React.createElement("dialog", { className: "dialog", open: true },
            React.createElement("h1", null, "Instructions"),
            React.createElement(WantedPoster, null,
                React.createElement(SvgBlob, Object.assign({}, randomBlob(200, 200)))),
            React.createElement("p", null, "Find the WANTED BLOB before the time end."),
            React.createElement("button", { className: "action-button", onClick: onClickStart }, "START"))));
    const LoseDialog = ({ onRetryClick, points, captured = [] }) => (React.createElement("div", { className: "dialog-backdrop" },
        React.createElement("dialog", { className: "dialog", open: true },
            React.createElement("h1", null, "You LOOSE"),
            React.createElement("p", null,
                React.createElement("span", { style: { color: "#2b2b2b" } }, "SCORE"),
                React.createElement("br", null),
                points,
                " PT",
                React.createElement("br", null)),
            !!captured.length && (React.createElement("p", null,
                React.createElement("span", { style: { color: "#2b2b2b" } }, "CAPTURED"),
                React.createElement("br", null),
                captured.map((blob) => (React.createElement("div", { style: {
                        width: "65px", margin: "3px", border: "1px solid black", background: "#adabab", display: "inline-block"
                    } },
                    React.createElement(SvgBlob, Object.assign({ key: blob.id }, blob, { style: { width: "80px", margin: "5px", border: "1px solid black", background: "#adabab" } }))))))),
            React.createElement("button", { className: "action-button", onClick: onRetryClick }, "RETRY"))));
    const initialGame = initialRound(0);
    function App() {
        const [game, setGame] = useState(initialGame);
        const { blobs, captured, wanted, points, time, elapsed } = game;
        const status = getStatus(game);
        useEffect(() => {
            let request = 0;
            let last = 0;
            const updateElapsed = () => {
                request = window.requestAnimationFrame((time) => {
                    const elapsed = time - last;
                    setGame((prev) => {
                        if (prev.round === 0)
                            return prev;
                        return ({
                            ...prev, elapsed: Math.min(prev.elapsed + elapsed, prev.time)
                        });
                    });
                    last = time;
                    updateElapsed();
                });
            };
            updateElapsed();
            return () => window.cancelAnimationFrame(request);
        }, []);
        const onBlobClick = (blob) => {
            if (blob.id === wanted.id) {
                setGame(nextRound);
            }
        };
        return (React.createElement(React.Fragment, null,
            React.createElement("header", null,
                React.createElement("h1", { className: "title" },
                    "BLOBS ",
                    React.createElement("span", { className: "title-doa" }, "DEAD OR ALIVE"))),
            React.createElement("div", { className: "content" },
                React.createElement("div", { className: "content-header" },
                    React.createElement("div", { className: "controls" },
                        React.createElement("div", null,
                            React.createElement("progress", { id: "time-progress", value: (time - elapsed) / time, max: 1, "data-animated": elapsed > 0 },
                                elapsed,
                                "ms"),
                            React.createElement("label", { htmlFor: "time-progress", className: "time-progress-label" },
                                Math.round(time - elapsed),
                                "ms")),
                        React.createElement("div", { className: "score" },
                            "PT ",
                            points)),
                    React.createElement(WantedPoster, null, wanted && React.createElement(SvgBlob, Object.assign({}, wanted)))),
                React.createElement("div", { className: "board" }, blobs.map((blob) => (React.createElement("div", { className: "box", onClick: () => onBlobClick(blob) },
                    React.createElement(SvgBlob, Object.assign({ key: blob.id }, blob, { animated: true })))))),
                status === "start" && (React.createElement(StartDialog, { onClickStart: () => setGame(initialRound(1)) })),
                status === "loose" && (React.createElement(LoseDialog, { points: points, captured: captured, onRetryClick: () => setGame(initialRound(1)) })))));
    }
    return { default: App };
})();
