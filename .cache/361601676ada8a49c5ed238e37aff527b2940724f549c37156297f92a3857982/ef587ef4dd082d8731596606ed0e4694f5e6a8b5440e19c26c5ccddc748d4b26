/* lib/components/SvgBlob.tsx */
const mod6 = (async () => {
    const { useEffect, useState } = await mod;
    const { Blob, Eye, Palette } = await mod7;
    const { random, randomItem } = await mod12;
    const { spline } = await mod13;
    const SvgBlobEye = (props) => {
        const { x, y, size, colors } = props;
        return (React.createElement("g", { transform: `matrix(1,0,0,1,${x},${y})`, className: "blob-eye" },
            React.createElement("circle", { r: size, cx: "0", cy: "0", "stroke-width": "2", stroke: colors.dark, fill: colors.light, className: "blob-eye-iris" }),
            React.createElement("circle", { r: size / 2, cx: "0", cy: "0", fill: colors.dark, className: "blob-eye-pupil", style: {
                    "--radius": `${size / 2}px`
                } })));
    };
    const animations = ["eye-roll", "eye-roll-reverse", "eye-converge", "eye-converge-reverse"];
    function SvgBlob(props) {
        let { width, height, body, eyes, colors, animated, } = props;
        const [animation, setAnimation] = useState("");
        useEffect(() => {
            if (!animated)
                return;
            if (!animation) {
                const timeout = setTimeout(() => setAnimation(randomItem(animations)), random(0, 20000));
                return () => clearTimeout(timeout);
            }
        }, [animation, setAnimation]);
        return (React.createElement("svg", { viewBox: `0 0 ${width} ${height}`, className: `blob ${animated && animation}`, onClick: () => setAnimation("eye-flock"), onAnimationEnd: () => setAnimation("") },
            React.createElement("path", { d: spline(body, 1, true), "stroke-width": 2, stroke: colors.dark, fill: colors.primary }),
            React.createElement("g", null,
                "$",
                eyes.map((eye) => React.createElement(SvgBlobEye, Object.assign({}, eye, { colors: colors }))))));
    }
    return { default: SvgBlob };
})();
